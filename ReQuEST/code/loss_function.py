# -*- coding: utf-8 -*-
"""Loss_function.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k8WprvAMnHmKK63QsA9BT3RYPI9UrGEH
"""

class MixedLoss(nn.Module):
  def __init__(self, label_smoothing=0.1, CE_Weight=1, BS_Weight=0, RL_Weight=0):
    super().__init__()
    self.log_softmax = nn.LogSoftmax(dim=1)
    self.ROUGE = Rouge()
    self.CELoss = nn.CrossEntropyLoss(ignore_index = -100,
                                      label_smoothing=label_smoothing,
                                      reduction = 'mean')
    self.CE_Weight = CE_Weight
    self.BS_Weight = BS_Weight
    self.RL_Weight = RL_Weight

  def forward(self, GoldSeqIDs, GenSeqlogits, PadID, vocabsize, tokenizer):
    RL, BS, CE = 0, 0, 0

    ## Log probabilities
    log_probabilities = (self.log_softmax(GenSeqlogits)).to(device)
    log_probabilities.requires_grad_()

    ## Cross entropy loss
    if (self.CE_Weight != 0):
      CE = self.CELoss(GenSeqlogits.view(-1, vocabsize), GoldSeqIDs.view(-1))

    ## Rouge
    if (self.RL_Weight != 0):
      Gold = torch.where(GoldSeqIDs != -100, GoldSeqIDs, PadID)
      Gold_decoded = tokenizer.batch_decode(sequences=Gold,
                                            skip_special_tokens=True,
                                            clean_up_tokenization_spaces=False)
      Gold_decoded=[Seq if len(Seq.strip()) > 0 else '-' for Seq in Gold_decoded]

      _, GenSeq = torch.max(GenSeqlogits, axis=-1)
      GenSeq_decoded = tokenizer.batch_decode(sequences=GenSeq,
                                              skip_special_tokens=True,
                                              clean_up_tokenization_spaces=False)
      GenSeq_decoded=[Seq if (len(Seq.strip()) > 0 and Seq!='.') else ' ' for Seq in GenSeq_decoded]
      try:
        RScores = self.ROUGE.get_scores(GenSeq_decoded, Gold_decoded)
      except:
        for seq in GenSeq_decoded:
          print('-'+ seq  + '-' + '\n')
      RLScores = [-1 * score["rouge-l"]["r"] for score in RScores]
      RLScores = (torch.LongTensor(RLScores)).to(device)
      log_probabilities_2 = log_probabilities.reshape(len(RLScores), -1)
      RougeVals = RLScores.reshape(len(RLScores), -1)
      RL = torch.mean(RougeVals * log_probabilities_2)

    ## BERTScore
    if (self.BS_Weight != 0):
      _, BS_R, BS_F = score(GenSeq_decoded, Gold_decoded, lang="en")
      BSScores = -1 * BS_R
      BSScores = (BSScores.reshape(len(BSScores), -1)).to(device)
      BS = torch.mean(BSScores * log_probabilities_2)

    # Final loss
    Final_loss = RL * self.RL_Weight + BS * self.BS_Weight + CE * self.CE_Weight

    return Final_loss